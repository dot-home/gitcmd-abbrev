#!/usr/bin/env bash
#
#  st - show status of one or more VCS checkouts or files in checkouts.
#
#  With no arguments, this shows the status of the checkout in which the
#  current working directory resides. A `-b` option may be given to
#  show a brief status (current repo only); without this the status of
#  all submodules will also be shown recursively.
#
#  Otherwise this command takes a list of paths, which is assumed to be "."
#  if empty. If all paths given are within the same checkout or repository
#  that the current working directory is in, a long-form VCs status
#  message will be printed for those paths. Otherwise, a short-form VCS
#  status message will be printed for each path.
#
set -Eeuo pipefail

. $(dirname $0)/vcsfunc.bash

summarize_cvs() {
    echo " ?/ ? c  (XXX write me)"
    # cvs -n update
}

summarize_git() {
    (cd $1
        branch=$(git branch -v | sed -n -e 's/^\* //p')
        brname=$(echo "$branch" | sed -e 's/ .*//')
        brstat=$(echo "$branch" | sed -e 's/^[^ ]* *[^ ]* *//')
        echo "$brstat" | grep >/dev/null 2>&1 '\[' || brstat="   $brstat"
        changed=$(  git status --porcelain | grep -v '^?' | wc -l)
        untracked=$(git status --porcelain | grep    '^?' | wc -l)
        printf "%2d/%2d g  %s %s\n" "$changed" "$untracked" "$brname" "$brstat"
    )
}

summarize_hg() {
    echo " ?/ ? h  (XXX write me)"
    # hg status?
}

summarize_svn() {
    echo " ?/ ? s  (XXX write me)"
    # svn status?
}

status_summaries() {
    path_len=$(for i in "$@"; do echo $i; done | wc -L)
    for i in "$@"; do
        local dir=$(echo $i | sed -e 's,/*$,,')
        [[ _"$dir" == _-* ]] && continue
        printf "%*s " $path_len "$dir"
        [ -d "$dir" ] || { echo "      x"; continue; }
        vcs=$(vcs_for_root "$dir" || true)
        [ -z "$vcs" ] && { echo "      d"; continue; }
        printf "%s\n" "$(summarize_$vcs "$dir")" | cut -c -$((79-$path_len))
    done
}

############################################################

status_git() {
    #   Git <1.7.9 (or maybe as far back as 1.7.0) has no -b option
    #   on Git status; we no longer support such old versions.
    $vcs status -bs "$@"
    $brief && return
    local s; while read s; do
        echo -n "__ $s "
        if [ -e $this_root/$s/.git ];
            then ( cd "$this_root/$s"; st; )
            else echo MISSING
        fi
    done < <(vcs_git_submodules "$this_root")
}

############################################################
# Main

#   Command-line Options
brief=false
for opt in "$@"; do case "$opt" in
    -b)     shift; brief=true;;
    *)      break;;
esac; done

#   Command-line Parameters
this_root=$(vcs_root .)
all_in_this_checkout=true
for dir in "$@"; do
    [[ _"$dir" == _-* ]] && continue
    [ "$this_root" != "$(vcs_root "$dir")" ] \
        && { all_in_this_checkout=false; break; }
done

if ! $all_in_this_checkout; then
    status_summaries "$@"
else
    vcs=$(vcs_for_path .)
    case $vcs in
        '')     echo 1>&2 "No VCS for ."; exit 1 ;;
        cvs)    cvs -n update "$@" ;;
        git)    status_git "$@";;
        *)      $vcs status "$@" ;;
    esac
fi
